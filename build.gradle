buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.12.0"
    }
}

apply plugin: "docker-compose"

subprojects {
    apply plugin: "java"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

        maven {
            url "https://dl.bintray.com/eventuateio-oss/eventuate-maven-release"
        }
        eventuateMavenRepoUrl.split(",").each { repoUrl -> maven { url repoUrl }}

        dependencies {
            compileOnly "org.projectlombok:lombok:$lombokVersion"
            annotationProcessor "org.projectlombok:lombok:$lombokVersion"
            implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))
        }
    }

    test {
        useJUnitPlatform()
    }
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_CDC_KAFKA_ENABLE_BATCH_PROCESSING", eventuateCdcKafkaEnableBatchProcessing
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion

    removeOrphans = true

    mysqlbinlog {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        removeContainers = project.ext.removeContainers
    }

    mysqlbinloginfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        startedServices = ["cdc-service", "zipkin"]
        removeContainers = project.ext.removeContainers
    }
}

subprojects.each {
    if(it.name.endsWith("-service") || it.name.endsWith("-gateway")) {
        mysqlbinlogComposeUp.dependsOn(":" + it.name + ":assemble")
    }
}

mysqlbinlogComposeUp.dependsOn(mysqlbinloginfrastructureComposeUp)

task buildAndStartServicesMySql(type: GradleBuild) {
    tasks = ["mysqlbinlogComposeUp"]
}

task stopServicesMySql(type: GradleBuild) {
    tasks = ["mysqlbinlogComposeDown"]
}